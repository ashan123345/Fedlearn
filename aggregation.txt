import flwr as fl
import socket
import pickle
from flwr.common import ndarrays_to_parameters, parameters_to_ndarrays

class FedAvgCustom(fl.server.strategy.FedAvg):
    def __init__(self, num_rounds):
        super().__init__()
        self.num_rounds = num_rounds  # Track total rounds
        self.current_round = 0  # Track the current round

    def aggregate_fit(self, rnd, results, failures):
        """Aggregates model updates and sends them to the global server."""
        aggregated_parameters = super().aggregate_fit(rnd, results, failures)
        
        if aggregated_parameters:
            print(f"✅ Round {rnd} aggregated successfully!")
            self.current_round = rnd  # Update current round
            send_to_global_server(aggregated_parameters[0], self.current_round == self.num_rounds)

        return aggregated_parameters

def wait_for_global_server(host="127.0.0.1", port=9090):
    """Wait for the global server to connect before starting FL."""
    print("🔄 Waiting for the global server to connect...")

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((host, port))
        server_socket.listen(1)

        conn, addr = server_socket.accept()
        with conn:
            print(f"✅ Global server connected from {addr}. Ready to start training!")

def send_to_global_server(aggregated_parameters, is_last_round, host="127.0.0.1", port=9091):
    """Send aggregated model updates to the global server, with a termination signal if last round."""
    print("📤 Sending aggregated updates to the global server...")

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        try:
            sock.connect((host, port))

            if is_last_round:
                message = "STOP"
                sock.sendall(message.encode())  # Send termination signal
                print("🛑 Sent termination signal to global server!")
            else:
                # Convert Parameters to ndarrays
                ndarrays = parameters_to_ndarrays(aggregated_parameters)

                # Use correct PyTorch naming convention
                parameter_names = ["fc1.weight", "fc1.bias", "fc2.weight", "fc2.bias", "fc3.weight", "fc3.bias"]
                parameters_dict = {name: param.tolist() for name, param in zip(parameter_names, ndarrays)}

                # Serialize and send
                serialized_parameters = pickle.dumps(parameters_dict)
                sock.sendall(serialized_parameters)

                print("✅ Aggregated updates sent to the global server!")
        except ConnectionRefusedError:
            print("❌ Could not connect to the global server. Make sure it is running.")

# Start the aggregation server
def start_server():
    wait_for_global_server()  # Ensure global server is connected first

    print("🔄 Waiting for clients to connect...")

    num_rounds = 5  # Define the total number of rounds
    strategy = FedAvgCustom(num_rounds)
    
    fl.server.start_server(
        server_address="0.0.0.0:8080",
        config=fl.server.ServerConfig(num_rounds=num_rounds),
        strategy=strategy,
    )

if __name__ == "__main__":
    start_server()
